translation_unit::= <statement_list>;

statement_list::= <statement>
                | <statement_list> <statement>
                ;

statement::= <selection_statement>
           | <iteration_statement>
           | <expression>
           | <function_definition>
           | <target_definition>
           ;

selection_statement::= <selection_statement_b>
                     | <selection_statement_b> ELSE <block>
                     ;

selection_statement_b::= IF LPAREN <expression> RPAREN <block>
                       | <selection_statement_b> ELIF LPAREN <expression> RPAREN <block>
                       ;

iteration_statement::= WHILE LPAREN <expression> RPAREN <block>
                     | FOR LPAREN <expression> COLON <expression> COLON <expression> RPAREN <block>
                     | FOR LPAREN ID IN ID RPAREN <block>
                     ;

expression::= <assignment_expression>
            ;

assignment_expression::= <conditional_expression>
                       | <postfix_expression> OP_ASSIGN <assignment_expression>
                       ;

conditional_expression::= <logical_or_expression>
                        | <logical_or_expression> QMARK <expression> COLON <conditional_expression>
                        ;

logical_or_expression::= <logical_and_expression>
                       | <logical_or_expression> OR_OP <logical_and_expression>
                       ;

logical_and_expression::= <equality_expression>
                        | <logical_and_expression> AND_OP <equality_expression>
                        ;

equality_expression::= <relational_expression>
                     | <equality_expression> EQ_OP <relational_expression>
                     | <equality_expression> NE_OP <relational_expression>
                     ;

relational_expression::= <additive_expression>
                       | <relational_expression> OP_L <additive_expression>
                       | <relational_expression> OP_G <additive_expression>
                       | <relational_expression> OP_LE <additive_expression>
                       | <relational_expression> OP_GE <additive_expression>
                       ;

additive_expression::= <multiplicative_expression>
                     | <additive_expression> OP_ADD <multiplicative_expression>
                     | <additive_expression> OP_SUB <multiplicative_expression>
                     ;

multiplicative_expression::= <postfix_expression>
                           | <multiplicative_expression> OP_MUL <postfix_expression>
                           | <multiplicative_expression> OP_DIV <postfix_expression>
                           | <multiplicative_expression> OP_MOD <postfix_expression>
                           ;

postfix_expression::= <primary_expression>
                    | <postfix_expression> LPAREN <argument_expression_list> RPAREN
                    ;

primary_expression::= IDENTIFIER COLON IDENTIFIER
                    | INT
                    | FLOAT
                    | STRING
                    | IDENTIFIER
                    ;

function_definition::= DEF ID COLON ID LPAREN <identifier_list> RPAREN <block>
                     | DEF ID LPAREN <identifier_list> RPAREN <block>
                     ;

target_definition::= ID STRING COLON <identifier_list> <block>
                   | ID COLON <identifier_list> <block>

identifier_list::= #blank#
                 | IDENTIFIER
                 | IDENTIFIER COLON IDENTIFIER
                 | <identifier_list> IDENTIFIER
                 | <identifier_list> IDENTIFIER COLON IDENTIFIER
                 ;

argument_expression_list::= #blank#
                          | <assignment_expression>
                          | <argument_expression_list> COMMA <assignment_expression>
                          ;


block::= INDENT DEDENT
       | INDENT <statement_list> DEDENT
       ;

