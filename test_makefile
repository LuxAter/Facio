SHELL = /bin/bash
ifndef .VERBOSE
  .SILENT:
endif

NAME=signi

ROOT=$(shell pwd)
SOURCE_DIR=source
INCLUDE_DIR=include
BUILD_DIR=build
EXTERNAL_DIR=external
DOC_DIR=docs
TEST_DIR=test
# EXAMPLE_DIR=/example
INSTALL_PATH?=/usr/local

CXX=clang++
CXXIGNORE=-Wno-gnu-zero-variadic-macro-arguments -Wno-ignored-optimization-argument
CXXFLAGS= -std=c++17 -fPIC -Wall -Wextra -Wpedantic $(CXXIGNORE) --static
LINK=-lz
INCLUDE=-I$(ROOT)/$(EXTERNAL_DIR)/estl -I$(ROOT)/$(BUILD_DIR)/libpng/include -I$(ROOT)/$(BUILD_DIR)/ligjpeg/include

COMMON_INCLUDE=-I$(ROOT)/$(INCLUDE_DIR) $(INCLUDE)

SCAN_COLOR=\033[1;35m
BUILD_COLOR=\033[32m
CLEAN_COLOR=\033[1;33m
LINK_COLOR=\033[1;32m
INSTALL_COLOR=\033[1;36m
CMD_COLOR=\033[1;34m
HELP_COLOR=\033[1;34m

define scan_target
printf "%b%s%b\n" "$(SCAN_COLOR)" "Scaning dependencies for target $(1)" "\033[0m"
endef
define complete_target
printf "%s\n" "Built target $(1)"
endef
define clean_target
printf "%b%s%b\n" "$(CLEAN_COLOR)" "Cleaning target $(1)" "\033[0m"
endef
define install_target
printf "%b%s%b\n" "$(INSTALL_COLOR)" "Installing target $(1)" "\033[0m"
endef
define uninstall_target
printf "%b%s%b\n" "$(INSTALL_COLOR)" "Unnstalling target $(1)" "\033[0m"
endef
define print_build_c
str=$$(realpath --relative-to="$(ROOT)" "$(1)");\
    printf "%b%s%b\n" "$(BUILD_COLOR)" "Building C object $$str" "\033[0m"
endef
define print_build_cpp
str=$$(realpath --relative-to="$(ROOT)" "$(1)");\
    printf "%b%s%b\n" "$(BUILD_COLOR)" "Building C++ object $$str" "\033[0m"
endef
define print_link_lib
str=$$(realpath --relative-to="$(ROOT)" "$(1)");\
    printf "%b%s%b\n" "$(LINK_COLOR)" "Linking static library $$str" "\033[0m"
endef
define print_link_exe
str=$$(realpath --relative-to="$(ROOT)" "$(1)");\
    printf "%b%s%b\n" "$(LINK_COLOR)" "Linking executable $$str" "\033[0m"
endef
define print_run_cmd
printf "%b%s%b\n" "$(CMD_COLOR)" "Running '$(1)'" "\033[0m"
endef
define help
printf "%b%*s%b: %s\n" "$(HELP_COLOR)" 20 "$(1)" "\033[0m" "$(2)"
endef

all: build-signi build-unit_test

clean: clean-libsigni.a clean-signi

install: install-libsigni.a

uninstall: uninstall-libsigni.a

# SIGNI {{{
SIGNI=$(ROOT)/signi
SIGNI_FILES=$(shell find "$(SOURCE_DIR)" -name "main.cpp")
SIGNI_OBJS=$(SIGNI_FILES:%=$(ROOT)/$(BUILD_DIR)/%.o)
-include $(SIGNI_OBJS:.o=.d)

build-signi: build-libsigni.a pre-exe $(SIGNI)
	$(call complete_target,$(shell basename $(SIGNI)))

clean-signi:
	$(call clean_target,$(shell basename $(SIGNI)))
	if [ -e "$(SIGNI)" ]; then rm $(SIGNI); fi

pre-exe:
	$(call scan_target,$(shell basename $(SIGNI)))

$(SIGNI): $(SIGNI_OBJS)
	$(call print_link_exe,$(shell basename $(SIGNI)))
	$(CXX) $(SIGNI_OBJS) $(LIBSIGNI.A) $(LINK) $(COMMON_INCLUDE) -o $(SIGNI)

install-signi: build-signi
	$(call install_target,$(shell basename $(SIGNI)))
	mkdir -p $(INSTALL_PATH)/bin/
	cp $(SIGNI)/ $(INSTALL_PATH)/bin

uninstall-signi:
	$(call uninstall_target,$(shell basename $(SIGNI)))
	if [ -e "$(INSTALL_PATH)/bin/$(shell basename $(SIGNI))" ]; then rm $(INSTALL_PATH)/bin/$(shell basename $(SIGNI)); fi

# }}}
# LIBSIGNI.A {{{
LIBSIGNI.A=$(BUILD_DIR)/libsigni.a
LIBSIGNI.A_FILES=$(filter-out %/main.cpp %/main.c, $(shell find "$(SOURCE_DIR)" -name "*.cpp"))
LIBSIGNI.A_OBJS=$(LIBSIGNI.A_FILES:%=$(ROOT)/$(BUILD_DIR)/%.o)
-include $(LIBSIGNI.A_OBJS:.o=.d)

build-libsigni.a: build-libpng.a build-libjpeg.a pre-libsigni.a $(LIBSIGNI.A)
	$(call complete_target,$(shell basename $(LIBSIGNI.A)))

clean-libsigni.a: clean-libpng.a clean-libjpeg.a
	$(call clean_target,$(shell basename $(LIBSIGNI.A)))
	if [ -e "$(LIBSIGNI.A)" ]; then rm $(LIBSIGNI.A); fi
	if [ -e "$(BUILD_DIR)/$(SOURCE_DIR)" ]; then rm $(BUILD_DIR)/$(SOURCE_DIR) -r; fi

pre-libsigni.a:
	$(call scan_target,$(shell basename $(LIBSIGNI.A)))

$(LIBSIGNI.A): $(LIBSIGNI.A_OBJS)
	$(call print_link_lib,$(shell basename $(LIBSIGNI.A)))
	mkdir $(BUILD_DIR)/libpng_tmp && cd $(BUILD_DIR)/libpng_tmp && ar x $(ROOT)/$(BUILD_DIR)/libpng/lib/libpng.a
	mkdir $(BUILD_DIR)/libjpeg_tmp && cd $(BUILD_DIR)/libjpeg_tmp && ar x $(ROOT)/$(BUILD_DIR)/libjpeg/lib/libjpeg.a
	ar rcs $@ $(LIBSIGNI.A_OBJS)
	ar -qc $@ $(BUILD_DIR)/libpng_tmp/*.o $(BUILD_DIR)/libjpeg_tmp/*.o
	rm -rf $(BUILD_DIR)/libpng_tmp $(BUILD_DIR)/libjpeg_tmp

install-libsigni.a: build-libsigni.a
	$(call install_target,$(shell basename $(LIBSIGNI.A)))
	mkdir -p $(INSTALL_PATH)/lib/
	mkdir -p $(INSTALL_PATH)/include/$(NAME)/
	cp $(LIBSIGNI.A) $(INSTALL_PATH)/lib
	if [ ! -z "$(INCLUDE_DIR)" ]; then cp -R $(INCLUDE_DIR)/ $(INSTALL_PATH)/include/$(NAME)/; fi
	if [ ! -z "$(shell find $(SOURCE_DIR) -name "*.h")" ]; then cd $(SOURCE_DIR) && cp --parents $(sehll cd $(SOURCE_DIR) && find . -name "*.h") $(INSTALL_PATH)/include/$(NAME); fi
	if [ ! -z "$(shell find $(SOURCE_DIR) -name "*.hpp")" ]; then cd $(SOURCE_DIR) && cp --parents $(sehll cd $(SOURCE_DIR) && find . -name "*.hpp") $(INSTALL_PATH)/include/$(NAME); fi

uninstall-libsigni.a:
	$(call uninstall_target,$(shell basename $(LIBSIGNI.A)))
	if [ ! -e "$(INSTALL_PATH)/lib/$(shell basename $(LIBSIGNI.A))" ]; then rm $(INSTALL_PATH)/lib/$(shell basename $(LIBSIGNI.A)); fi
	if [ ! -e "$(INSTALL_PATH)/include/$(NAME)" ]; then rm $(INSTALL_PATH)/include/$(NAME) -r; fi

# }}}
# LIBPNG.A {{{
build-libpng.a: pre-libpng.a
	if [ ! -f "$(EXTERNAL_DIR)/libpng/configure" ]; then $(call print_run_cmd,autogen.sh) && cd $(EXTERNAL_DIR)/libpng && ./autogen.sh; fi
	if [ ! -f "$(EXTERNAL_DIR)/libpng/Makefile" ]; then $(call print_run_cmd,configure) && cd $(EXTERNAL_DIR)/libpng && ./configure --prefix=$(ROOT)/$(BUILD_DIR)/libpng; fi
	if [ ! -d "$(BUILD_DIR)/libpng" ]; then $(call print_run_cmd,make) && cd $(EXTERNAL_DIR)/libpng && make install; fi
	$(call complete_target,libpng.a)

clean-libpng.a:
	$(call clean_target,libpng.a)
	if [ -e "$(EXTERNAL_DIR)/libpng/Makefile" ]; then cd $(EXTERNAL_DIR)/libpng && make clean && rm Makefile; fi
	if [ -d "$(BUILD_DIR)/libpng" ]; then rm $(BUILD_DIR)/libpng -r; fi

pre-libpng.a:
	$(call scan_target,libpng.a)

# }}}
# LIBJPEG.A {{{
build-libjpeg.a: pre-libjpeg.a
	if [ ! -f "$(EXTERNAL_DIR)/jpeg-8d/configure" ]; then $(call print_run_cmd,autogen.sh) && cd $(EXTERNAL_DIR)/jpeg-8d && ./autogen.sh; fi
	if [ ! -f "$(EXTERNAL_DIR)/jpeg-8d/Makefile" ]; then $(call print_run_cmd,configure) && cd $(EXTERNAL_DIR)/jpeg-8d && ./configure --prefix=$(ROOT)/$(BUILD_DIR)/libjpeg; fi
	if [ ! -d "$(BUILD_DIR)/libjpeg" ]; then $(call print_run_cmd,make) && cd $(EXTERNAL_DIR)/jpeg-8d&& make install; fi
	$(call complete_target,libjpeg.a)

clean-libjpeg.a:
	$(call clean_target,libpng.a)
	if [ -e "$(EXTERNAL_DIR)/jpeg-8d/Makefile" ]; then cd $(EXTERNAL_DIR)/jpeg-8d && make clean && rm Makefile; fi
	if [ -d "$(BUILD_DIR)/libjpeg" ]; then rm $(BUILD_DIR)/libjpeg -r; fi

pre-libjpeg.a:
	$(call scan_target,libjpeg.a)
# }}}
# TEST {{{
UNIT_TEST=$(ROOT)/unit-test
UNIT_TEST_FILES=$(shell find "$(TEST_DIR)" -name "*.cpp")
UNIT_TEST_OBJS=$(UNIT_TEST_FILES:%=$(ROOT)/$(BUILD_DIR)/%.o)
-include $(UNIT_TEST_OBJS:.o=.d)

build-unit_test: build-libsigni.a pre-unit_test $(UNIT_TEST)
	$(call complete_target,$(shell basename $(UNIT_TEST)))

clean-unit_test:
	$(call clean_target,$(shell basename $(UNIT_TEST)))
	if [ -e "$(UNIT_TEST)" ]; then rm $(UNIT_TEST); fi

pre-unit_test:
	$(call scan_target,$(shell basename $(UNIT_TEST)))

$(UNIT_TEST): $(UNIT_TEST_OBJS)
	$(call print_link_exe,$(shell basename $(UNIT_TEST)))
	$(CXX) $(UNIT_TEST_OBJS) $(LIBSIGNI.A) $(LINK) $(COMMON_INCLUDE) -o $(UNIT_TEST)
# }}}

$(ROOT)/$(BUILD_DIR)/%.cpp.o: %.cpp
	$(call print_build_cpp,$@)
	mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -MMD -c $(COMMON_INCLUDE) $< -o $@

